#! /usr/bin/python
# this is billo's crappy blog publishing script
#
# Essentially:
# 1. write Markdown files with a .txt extension. 
# 2. Arrange them in a directory structure YYYY/MM
# 3. create a CSS file header and footer shtml files
# 4. enable apache server side includes to parse .shtml files
# 5. run this script
#
# Directories needed
# blogdir: this is where the .txt (Markdown) files should live
# masterdir: this is where some static boilerplate include files are
#
#
# Files needed in blogdir. These are not altered by the script:
# index.shtml: this is not touched by the update script.
# header.shtml: when the script creates pages, this is the top chunk
# footer.shtml: when the script creates pages, this is the bottom chunk
# footerbar.shtml: visible contents of the footer on all pages
# monthheader.shtml: for the generated monthly index, this file is the top chunk
# monthfooter.shtml: for the generated monthly index, this file is the bottom chunk
# feed/index.shtml: the shell of the RSS feed
#
# Files needed in masterdir:
# monthindex.shtml: This is the master template for each generated index.shtml in the month folders
# tweet.shtml: this includes the "tweet" button which is placed at the top of the archive index.
#
# files generated by this script:
# blogdir/sidebar.shtml - this is the top level index of all the months where there is a post
# blogdir/contents.shtml = top level meat middle section of the main index file
# blogdir/feed/items.ihtml - the RSS feed items
# blogdir/YYYY/MM/contents.shtml - the contents of each month index page
# blogdir/YYYY/MM/index.shtml - the index page of each month
#
from __future__ import print_function
import sqlite3
import os
import os.path
from datetime import datetime
import codecs
import re
import sys

###############
# change these directories to where your blog 
# is served by apache and where the script lives
# if you want them in different places.
# default is that the master dir is where this script is, and the
# blog dir is in a subdir called 'blog'
scriptdir = os.path.dirname(os.path.realpath(__file__))
blogdir = scriptdir + '/blog'
masterdir = scriptdir + '/'
###############

monthdict = {}
allposts = {}
months = []
gpostcount = 0
forcemarkdown = False

def safedir(path):
    if (not os.path.exists(path)):
        os.mkdir(path)
    
with codecs.open(masterdir + 'monthindex.shtml', encoding='utf-8', mode='r') as f:
    monthindex = f.read()

with codecs.open(masterdir + 'tweet.shtml', encoding='utf-8', mode='r') as f:
    tweetblock = f.read()

# returns true if filea is older than fileb
def isolder(filea, fileb):
    timea = os.path.getmtime(filea)
    timeb = os.path.getmtime(fileb)
    difference = timea - timeb
    #print("{0} {1} / {2} {3} = {4}".format(filea, timea, fileb, timeb, difference))
    if difference < 0.0:
        print ('*****OLDER******')

    return difference < 0.0
    

# haha, post process, get it?
# for each blog post, read out the title (first line)
# and date (third line)
# The title is assumbed to have ** ** around it to make it a markdown H1
# Output is an .shtml file that is named based on title
def postprocess(monthdir, year, month, postfile):
    thismonth = monthdict.get(monthdir, None)
    if (not thismonth):
        thismonth = {'year': year, 'month': month, 'posts': []}
        monthdict[monthdir] = thismonth
        months.append(thismonth)
    posts = thismonth['posts']
    name = re.sub(r'^(.*)\.txt', r'\1', postfile)
    plaintitle = 'wut'
    datestamp = '1970-01-01 00:00'
    global preview
    with codecs.open(monthdir + '/' + postfile, encoding='utf-8', mode='rt') as f:
        linecount = 0 
        preview = ''
        for line in f:
            if linecount == 0:
                plaintitle = line.strip()
                plaintitle = plaintitle.lstrip('*')
                plaintitle = plaintitle.rstrip('*')
            elif linecount == 2:
                datestamp = line.strip()
            else:
                preview = preview + line
            linecount = linecount + 1
            
    filepath = '{0}/{1}.txt'.format(monthdir, name)
    htmlpath = '{0}/{1}.ihtml'.format(monthdir, name)
    shtmlpath = '{0}/{1}.shtml'.format(monthdir, name)
    shtmlbasepath = '{1}.shtml'.format(monthdir, name)
    plainhtmlbasepath = '{1}.html'.format(monthdir, name)
    url = '{0}/{1}/{2}.html'.format(year, month, name)
    post = {'title': plaintitle, 'url': url, 'baseurl': plainhtmlbasepath, 
            'monthdir': monthdir, 'postfile': postfile, 'name': name, 
            'year': year, 'month': month,
            'shtmlfile': shtmlbasepath, 'preview': preview}
    posts.append(post)
    allposts[datestamp] = post
    with codecs.open(shtmlpath, encoding='utf-8', mode='w') as f:
        print(u'<!--#set var="title" value="{0}" -->'.format(plaintitle), sep='', end='\n', file=f)
        print('<!--#include virtual="/header.shtml" -->', sep='', end='\n', file=f)
        print('<!--#include virtual="{0}.ihtml" -->'.format(name), sep='', end='\n', file=f)
        print('<!--#include virtual="/footer.shtml" -->', sep='', end='\n', file=f)
    mdcmd = '{2}/Markdown.pl --html4tags {0} > {1}'.format(filepath, htmlpath, scriptdir)
    if forcemarkdown or not os.path.isfile(htmlpath) or isolder(htmlpath, filepath):
        print(mdcmd)
        os.system(mdcmd)
    global gpostcount
    gpostcount = gpostcount + 1
    print('Processing {0}'.format(gpostcount), end='\r')
    sys.stdout.flush()

# in each month, find all the txt files
def monthscan(dirpath, year, month):
    monthdir = dirpath + '/' + month
    textfiles = sorted(os.listdir(monthdir))
    for file in textfiles:
        if (re.match(r'.*\.txt$', file)):
            postprocess(monthdir, year, month, file)

# in each year directory, scan for files
def yearscan(dirpath, year):
    yeardir = dirpath + '/' + year
    months = sorted(os.listdir(yeardir))
    for file in months:
        if (re.match(r'^\d\d$', file)):
            monthscan(yeardir, year, file)


# this is the main scanning loop that looks for 
# .txt markdown files, starting with the years.
def blogscan(dirpath):
    blogfiles = sorted(os.listdir(dirpath))

    for file in blogfiles:
        if (re.match(r'^\d\d\d\d$', file)):
            yearscan(dirpath, file)

def postdump():
    stamps = sorted(allposts.keys(), reverse=True)
    count = 0
    with codecs.open(blogdir + '/sidebar.shtml', encoding='utf-8', mode='w') as f:
        reversemonths = sorted(monthdict.keys(), reverse=True)
        print(u'<div class="sidebar">',
              sep='', end='\n', file=f)
        f.write(tweetblock)
        print(u'<p>Archive</p>\n<ul class="sidebarlist">',
              sep='', end='\n', file=f)
        for monthkey in reversemonths:
            month = monthdict[monthkey]
            posts = month['posts']
            print(u'<li><a href="/{0}">{0}({1})</a></li>'.format(monthkey.replace(blogdir + '/', ''), len(posts)),
                  sep='', end='\n', file=f)
        print(u'</ul></div>',
              sep='', end='\n', file=f)

            
    with codecs.open(blogdir + '/contents.shtml', encoding='utf-8', mode='w') as f:
        for stamp in stamps:
            post = allposts[stamp]
            # usefule for dumping all links
            #print(post['url'])
            if count < 5:
                print(u'<div class="frontindexentry">',  sep='', end='\n', file=f)
                print(u'<!--#include virtual="{0}/{1}/{2}.ihtml" -->'.format( 
                      post['year'], post['month'], post['name']),  
                      sep='', end='\n', file=f)
                print(u'<a href="{0}">Permalink</a>'.format(post['url']),
                      sep='', end='\n', file=f)
                print(u'</div>', sep='', end='\n', file=f)

            count = count + 1
            # only print first 10 posts.

    with codecs.open(blogdir + '/feed/items.ihtml', encoding='utf-8', mode='w') as f:
        print(u'<lastBuildDate>{0}</lastBuildDate>'.format(stamps[0]),
              sep='', end='\n', file=f)
        count = 0
        for stamp in stamps:
            count = count + 1
            if count > 50:
                break
            post = allposts[stamp]
            print(u'<item><title>{0}</title>'.format(post['title']),
                  sep='', end='\n', file=f)
            print(u'<author>you</author>'.format(post['url']),
                  sep='', end='\n', file=f)
            print(u'<pubDate>{0}</pubDate>'.format(stamp),
                  sep='', end='\n', file=f)
            print(u'<link>{0}</link>'.format(post['url']),
                  sep='', end='\n', file=f)

            print(u'<description>{0}</description>'.format(post['preview']),
                  sep='', end='\n', file=f)
            print(u'</item>', sep='', end='\n', file=f)

    for month in months:
        #print(month['year'] + month['month'])
        monthdir = month['year'] + '/' + month['month']
        contentpath = blogdir + '/' + monthdir + '/' + 'contents.shtml'
        indexpath = blogdir + '/' + monthdir + '/' + 'index.shtml'
        with codecs.open(indexpath, encoding='utf-8', mode='w') as f:
            print(u'<!--#set var="title" value="{0}" -->'.format(monthdir), sep='', end='\n', file=f)
            f.write(monthindex)
            with codecs.open(contentpath, encoding='utf-8', mode='w') as f:
                for post in month['posts']:
                    print(u'<div class="monthindexentry"><a href="{0}">{1}</a></div>'.format(post['baseurl'], post['title']), sep='', end='\n', file=f)
                    
        
def options():
    global forcemarkdown
    global blogdir
    count = 0
    for arg in sys.argv:
        if arg.startswith('-'):
            if arg == '-force':
                forcemarkdown = True
        else:
            if (count > 0):
                blogdir = arg
        count = count + 1

options()
blogscan(blogdir)
postdump()
print('')

exit(0)

